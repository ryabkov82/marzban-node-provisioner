---
# Play 1: Obtain admin token and node certificate from Marzban panel (runs locally)
- name: Get panel token and node certificate (runs locally)
  hosts: localhost
  gather_facts: false
  vars:
    panel_url: "{{ panel_url | default(lookup('ansible.builtin.env','PANEL_URL')) }}"
    panel_username: "{{ panel_username | default(lookup('ansible.builtin.env','PANEL_USERNAME')) }}"
    panel_password: "{{ panel_password | default(lookup('ansible.builtin.env','PANEL_PASSWORD')) }}"
    panel_validate_certs: "{{ panel_validate_certs | default(true) }}"
  tasks:
    - name: Obtain admin token
      ansible.builtin.uri:
        url: "{{ panel_url }}/api/admin/token"
        method: POST
        body_format: form-urlencoded
        body:
          username: "{{ panel_username }}"
          password: "{{ panel_password }}"
          grant_type: password
        return_content: true
        status_code: 200
        validate_certs: "{{ panel_validate_certs }}"
      register: token_resp

    - name: Set token fact
      ansible.builtin.set_fact:
        access_token: "{{ token_resp.json.access_token }}"

    - name: Get node settings (certificate)
      ansible.builtin.uri:
        url: "{{ panel_url }}/api/node/settings"
        method: GET
        headers:
          Authorization: "Bearer {{ access_token }}"
        return_content: true
        status_code: 200
        validate_certs: "{{ panel_validate_certs }}"
      register: node_settings

    - name: Save panel certificate as fact
      ansible.builtin.set_fact:
        panel_certificate: "{{ node_settings.json.certificate }}"

# Play 2: Update hosts, install Docker (without curl), drop certificate, run marzban-node
- name: Provision Marzban-node on hosts
  hosts: marzban_nodes
  become: true
  vars:
    ssl_dir: /var/lib/marzban-node
    service_protocol: "{{ service_protocol | default('rest') }}"
  tasks:
    # --- Optional: noninteractive system update (safe defaults keep old configs) ---
    - name: Ensure APT noninteractive defaults (keep old configs)
      ansible.builtin.copy:
        dest: /etc/apt/apt.conf.d/99noninteractive
        mode: "0644"
        content: |
          APT::Get::Assume-Yes "true";
          Dpkg::Options { "--force-confdef"; "--force-confold"; }
          Dpkg::Use-Pty "0";
      tags: [update, upgrade]

    - name: Make needrestart noninteractive (auto-restart services)
      ansible.builtin.copy:
        dest: /etc/needrestart/conf.d/zzz-ansible.conf
        mode: "0644"
        content: |
          $nrconf{restart} = 'a';
      tags: [update, upgrade]

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      environment:
        DEBIAN_FRONTEND: noninteractive
      tags: [update, upgrade]

    - name: Dist upgrade (full-upgrade) with autoremove/autoclean
      ansible.builtin.apt:
        upgrade: dist
        force_apt_get: true
        autoremove: true
        autoclean: true
      environment:
        DEBIAN_FRONTEND: noninteractive
        NEEDRESTART_MODE: a
      tags: [update, upgrade]

    - name: Check if reboot is required
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_flag
      tags: [update, upgrade]

    - name: Reboot if needed
      ansible.builtin.reboot:
        msg: "Rebooting after kernel/glibc upgrade"
        connect_timeout: 30
        reboot_timeout: 900
        test_command: whoami
      when: reboot_flag.stat.exists
      tags: [update, upgrade]
    # --- End of system update block ---

    # --- Docker install from official repository (lint-clean, no curl) ---
    - name: Ensure prerequisites for Docker repo
      ansible.builtin.apt:
        name:
          - ca-certificates
          - gnupg
          - python3-docker     # SDK for community.docker modules
        state: present
        update_cache: true

    - name: Ensure keyrings directory exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"

    - name: Download Docker GPG key (ASCII armored)
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: "0644"
        force: true

    - name: Map architecture for Docker APT repo
      ansible.builtin.set_fact:
        docker_apt_arch_map:
          x86_64: amd64
          amd64: amd64
          aarch64: arm64
          arm64: arm64
        docker_apt_arch: "{{ docker_apt_arch_map[ansible_facts.architecture] | default('amd64') }}"

    - name: Add Docker APT repository
      ansible.builtin.apt_repository:
        repo: >-
          deb [arch={{ docker_apt_arch }} signed-by=/etc/apt/keyrings/docker.asc]
          https://download.docker.com/linux/ubuntu
          {{ ansible_facts.distribution_release }} stable
        filename: docker
        state: present
        update_cache: true

    - name: Install Docker Engine packages
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: true

    - name: Ensure Docker service is running and enabled
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true
    # --- End of Docker install ---

    - name: Ensure certificate directory exists
      ansible.builtin.file:
        path: "{{ ssl_dir }}"
        state: directory
        mode: "0755"

    - name: Write panel certificate for node
      ansible.builtin.copy:
        content: "{{ hostvars['localhost'].panel_certificate }}"
        dest: "{{ ssl_dir }}/ssl_client_cert.pem"
        owner: root
        group: root
        mode: "0644"

    - name: Run marzban-node container
      community.docker.docker_container:
        name: marzban-node
        image: "gozargah/marzban-node:latest"
        state: started
        restart_policy: always
        network_mode: host
        volumes:
          - "{{ ssl_dir }}:{{ ssl_dir }}"
        env:
          SSL_CLIENT_CERT_FILE: "{{ ssl_dir }}/ssl_client_cert.pem"
          SERVICE_PROTOCOL: "{{ service_protocol }}"

# Play 3: Register nodes in the panel
- name: Register nodes in Marzban panel
  hosts: marzban_nodes
  gather_facts: false
  vars:
    service_port: "{{ service_port | default(62050) }}"
    api_port: "{{ api_port | default(62051) }}"
    add_as_new_host: "{{ add_as_new_host | default(true) }}"
    usage_coefficient: "{{ usage_coefficient | default(1.0) }}"
  tasks:
    - name: Add node (delegated to localhost)
      ansible.builtin.uri:
        url: "{{ hostvars['localhost'].panel_url }}/api/node"
        method: POST
        headers:
          Authorization: "Bearer {{ hostvars['localhost'].access_token }}"
        body_format: json
        body:
          name: "{{ inventory_hostname }}"
          address: "{{ hostvars[inventory_hostname].ansible_host | default(inventory_hostname) }}"
          port: "{{ service_port }}"
          api_port: "{{ api_port }}"
          add_as_new_host: "{{ add_as_new_host }}"
          usage_coefficient: "{{ usage_coefficient }}"
        return_content: true
        status_code: [200, 201]
        validate_certs: "{{ hostvars['localhost'].panel_validate_certs }}"
      register: add_node_result
      delegate_to: localhost

    - name: Show panel response
      ansible.builtin.debug:
        var: add_node_result.json
      delegate_to: localhost
