---
# Play 1: локально — токен и сертификат
- name: Panel API (local)
  hosts: localhost
  gather_facts: false
  tags: [panel_api]
  vars:
    panel_url: "{{ lookup('env', 'PANEL_URL') }}"
    panel_username: "{{ lookup('env', 'PANEL_USERNAME') }}"
    panel_password: "{{ lookup('env', 'PANEL_PASSWORD') }}"
    panel_validate_certs: "{{ (lookup('env', 'PANEL_VERIFY_TLS') | default('true')) | bool }}"
  roles:
    - role: panel_api
      tags: [panel_api]


# Play 2: на узлах — апдейт, TLS, контейнер, прокси
- name: Provision node
  hosts: marzban_nodes
  become: true
  roles:
    # апдейты ОС можно запускать выборочно тегами update,upgrade
    - { role: os_update, tags: [update, upgrade] }

    # добавление узла в задачу обновления сертификатов на cert-master
    - { role: cert_master_enroll, tags: [cert_enroll] }

    # Синхронизация wildcard-сертификата с cert-master на узел
    - { role: tls_sync, tags: [tls_sync] }

    # Контейнер узла (при необходимости — берет cert панели из Play 1)
    - role: marzban_node
      tags: [marzban_node]
      # пробросим сертификат панели в роль (если panel_api его получал)
      panel_certificate: "{{ hostvars['localhost'].panel_certificate | default('') }}"

    # Прокси-слой
    - { role: haproxy, tags: [haproxy] }
    - { role: nginx, tags: [nginx] }

# Play 3: регистрация узлов в панели (роль видит host_vars узла)
- name: Register Nodes In Panel
  hosts: marzban_nodes
  gather_facts: false
  tags: [panel_register]
  pre_tasks:
    - name: Assert token exists from Play 1
      delegate_to: localhost
      ansible.builtin.assert:
        that:
          - hostvars['localhost'].panel_api_access_token is defined
          - hostvars['localhost'].panel_api_access_token | length > 0
        fail_msg: >-
          panel_api_access_token is missing. Run Play 1 (panel_api) first
          or export PANEL_* env vars.
  vars:
    # URL/verify и токен берём из Play 1 (localhost), с безопасным fallback к env
    panel_register_url: >-
      {{ hostvars['localhost'].panel_api_url
         | default(lookup('env', 'PANEL_URL')) }}
    panel_register_validate_certs: >-
      {{ hostvars['localhost'].panel_api_validate_certs
         | default((lookup('env', 'PANEL_VERIFY_TLS') | default('true')) | bool) }}
    panel_register_access_token: >-
      {{ hostvars['localhost'].panel_api_access_token
         | default(lookup('env', 'PANEL_ACCESS_TOKEN') | default('')) }}
  roles:
    - role: panel_register
      tags: [panel_register]

# Play 4: Регистрация DNS-записей
- name: Cloudflare DNS (Delegated)
  hosts: marzban_nodes
  gather_facts: false
  tags: [dns]
  tasks:
    - name: DNS | Apply records for this node (delegated to localhost)
      ansible.builtin.include_role:
        name: cf_dns
        apply:
          delegate_to: localhost
      vars:
        cf_dns_api_token: "{{ lookup('env', 'CF_API_TOKEN') }}"
        cf_dns_zone: "{{ lookup('env', 'CF_ZONE') | default('digitalstreamers.xyz') }}"
        cf_dns_target_ip: "{{ ansible_host | default(inventory_hostname) }}"

# Play 5: Удаление DNS-записей
- name: Cloudflare DNS Purge By IP (Local)
  hosts: localhost
  gather_facts: false
  tags: [never, dns_purge_ip]     # выполнится только с --tags dns_purge_ip
  tasks:
    - name: DNS Purge | Remove all records by IP
      ansible.builtin.include_role:
        name: cf_dns_purge_ip
      vars:
        cf_dns_purge_ip_api_token: "{{ lookup('env', 'CF_API_TOKEN') }}"
        cf_dns_purge_ip_zone: "{{ lookup('env', 'CF_ZONE') | default('digitalstreamers.xyz') }}"
        cf_dns_purge_ip_zone_id: "{{ lookup('env', 'CF_ZONE_ID') | default('') }}"
        cf_dns_purge_ip_target_ip: "{{ lookup('env', 'PURGE_IP') | default('') }}"
        cf_dns_purge_ip_confirm: "{{ (lookup('env', 'DNS_PURGE_CONFIRM') | default('false')) | bool }}"
        # cf_dns_purge_ip_types: ['A','AAAA']  # при желании ограничить типы

# Play 6: Удаление узла из задачи обновления сертификатов на cert-master
- name: Cert Master Unenroll
  hosts: marzban_nodes
  become: true
  tags: [never, cert_master_remove]
  tasks:
    - name: Cert Master | Unenroll node from cert-master
      ansible.builtin.include_role:
        name: cert_master_enroll
      vars:
        cert_master_enroll_state: absent

# Play 7: удаление узлов из панели (локально)
- name: Unregister Nodes In Panel (Local)
  hosts: localhost
  gather_facts: false
  tags: [panel_unregister]
  tasks:
    - name: Panel Unregister | For each node in group
      ansible.builtin.include_role:
        name: panel_unregister
      loop: "{{ groups['marzban_nodes'] | default([]) }}"
      loop_control: { loop_var: node }
      vars:
        # тянем токен/URL из Play 1 (panel_api) или из env
        panel_unregister_url: >-
          {{ hostvars['localhost'].panel_api_url
             | default(lookup('env','PANEL_URL')) }}
        panel_unregister_validate_certs: >-
          {{ hostvars['localhost'].panel_api_validate_certs
             | default((lookup('env','PANEL_VERIFY_TLS') | default('true')) | bool) }}
        panel_unregister_access_token: >-
          {{ hostvars['localhost'].panel_api_access_token
             | default(lookup('env','PANEL_ACCESS_TOKEN') | default('')) }}
        # кто удаляется
        panel_unregister_node_name: "{{ node }}"
        panel_unregister_address: >-
          {{ hostvars[node].panel_register_address
             | default(hostvars[node].ansible_host | default(node)) }}
        panel_unregister_reality_inbound_tag: >-
          {{ hostvars[node].panel_register_reality_inbound_tag
             | default('VLESS TCP REALITY') }}
        panel_unregister_reality_extra_names: >-
          {{ hostvars[node].panel_register_reality_extra_names | default([]) }}
        panel_unregister_hosts_inbound_tags: >-
          {{ hostvars[node].panel_unregister_hosts_inbound_tags
             | default(['vless','shadowsocks']) }}
